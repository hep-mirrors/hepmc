//////////////////////////////////////////////////////////////////////////
// testHepMC.cc.in
//
// garren@fnal.gov, March 2006
// based on example_EventSelection
// Apply an event selection to the events in testHepMC.input
// Events containing a photon of pT > 25 GeV pass the selection and are
// written to "testHepMC.out"
// Add arbitrary PDF information to the good events
// Also write events using IO_AsciiParticles 
//////////////////////////////////////////////////////////////////////////
//

#include "HepMC/IO_GenEvent.h"
#include "HepMC/IO_AsciiParticles.h"
#include "HepMC/GenEvent.h"

// define methods and classes used by this test
#include "IsGoodEvent.h"

void read_testIOGenEvent();
void read_testAscii();
void read_testExtendedAscii();

int main() { 
    read_testIOGenEvent();
    read_testAscii();
    read_testExtendedAscii();
    return 0;
}

void read_testIOGenEvent()
{
    // declare an input strategy to read the data produced with the 
    // example_MyPythia
    HepMC::IO_GenEvent ascii_in("@srcdir@/testIOGenEvent.input",std::ios::in);
    // declare another IO_GenEvent for writing out the good events
    HepMC::IO_GenEvent ascii_out("testHepMC.out",std::ios::out);
    // declare an IO_AsciiParticle for output
    HepMC::IO_AsciiParticles particle_out("testHepMCParticle.out",std::ios::out);
    // declare an instance of the event selection predicate
    IsGoodEvent is_good_event;
    //........................................EVENT LOOP
    int icount=0;
    int num_good_events=0;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	icount++;
	if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
				      << " its # " << evt->event_number() 
				      << std::endl;
	if ( is_good_event(evt) ) {
	    ascii_out << evt;
	    particle_out << evt;
	    ++num_good_events;
	}
	
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    //........................................PRINT RESULT
    std::cout << num_good_events << " out of " << icount 
	      << " processed events passed the cuts. Finished." << std::endl;
}

void read_testAscii()
{
        // declare an input strategy to read the data produced with the 
	// example_MyPythia
	HepMC::IO_GenEvent ascii_in("@srcdir@/testAscii.input",std::ios::in);
	// declare another IO_GenEvent for writing out the good events
	HepMC::IO_GenEvent ascii_out("testIOAscii.dat",std::ios::out);
	//........................................EVENT LOOP
	int icount=0;
	int num_good_events=0;
	HepMC::GenEvent* evt = ascii_in.read_next_event();
	while ( evt ) {
	    icount++;
	    if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
					  << " its # " << evt->event_number() 
					  << std::endl;
	    ascii_out << evt;

	    // clean up and get next event
	    delete evt;
	    ascii_in >> evt;
	}
	//........................................PRINT RESULT
	std::cout << icount << " events processed. Finished." << std::endl;
}

void read_testExtendedAscii()
{
    // extended (complete) output
    HepMC::IO_GenEvent xin("@srcdir@/testHepMCExtended.input",std::ios::in);
    // declare another IO_GenEvent for output
    HepMC::IO_GenEvent xout("testIOHepMCExtended.dat",std::ios::out);
    //........................................EVENT LOOP
    int icount=0;
    int num_good_events=0;
    double x=0., y=0., z=0.;
    HepMC::GenEvent* evt = xin.read_next_event();
    while ( evt ) {
	icount++;
	if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
				      << " its # " << evt->event_number() 
				      << std::endl;
	xout << evt;

	// clean up and get next event
	delete evt;
	xin >> evt;
    }
    std::cout << icount << " events processed. Finished." << std::endl;
}
