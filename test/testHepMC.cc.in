//////////////////////////////////////////////////////////////////////////
// testHepMC.cc.in
//
// garren@fnal.gov, March 2006
// based on example_EventSelection
// Apply an event selection to the events in testHepMC.input
// Events containing a photon of pT > 25 GeV pass the selection and are
// written to "testHepMC.out"
// Add arbitrary PDF information to the good events
// Also write events using IO_AsciiParticles 
//////////////////////////////////////////////////////////////////////////
//

#include "HepMC/GenEvent.h"
#include "HepMC/IO_GenEvent.h"
#include "HepMC/IO_Ascii.h"
#include "HepMC/IO_AsciiParticles.h"

// define methods and classes used by this test
#include "IsGoodEvent.h"

void read_testIOGenEvent();
void read_testAscii();
void read_testExtendedAscii();
void read_various();

int main() { 
    read_testIOGenEvent();
    read_testAscii();
    read_testExtendedAscii();
    read_various();
    return 0;
}

void read_testIOGenEvent()
{
    // declare an input strategy to read the data produced with the 
    // example_MyPythia
    HepMC::IO_GenEvent ascii_in("@srcdir@/testIOGenEvent.input",std::ios::in);
    // declare another IO_GenEvent for writing out the good events
    HepMC::IO_GenEvent ascii_out("testHepMC.out",std::ios::out);
    // declare an IO_AsciiParticle for output
    HepMC::IO_AsciiParticles particle_out("testHepMCParticle.out",std::ios::out);
    // declare an instance of the event selection predicate
    IsGoodEvent is_good_event;
    //........................................EVENT LOOP
    int icount=0;
    int num_good_events=0;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	icount++;
	if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
				      << " its # " << evt->event_number() 
				      << std::endl;
	if ( is_good_event(evt) ) {
	    ascii_out << evt;
	    particle_out << evt;
	    ++num_good_events;
	}
	
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    // print status of input stream
    if ( ascii_in.error_type() != 0 ) {
        std::cout << "processing of @srcdir@/testIOGenEvent.input ended with error " 
	          << ascii_in.error_type() << std::endl;
        std::cout << "  --- " << ascii_in.error_message() << std::endl;
    }
    //........................................PRINT RESULT
    std::cout << num_good_events << " out of " << icount 
	      << " processed events passed the cuts. Finished." << std::endl;
}

void read_testAscii()
{
        // declare an input strategy to read the data produced with the 
	// example_MyPythia
	HepMC::IO_GenEvent ascii_in("@srcdir@/testAscii.input",std::ios::in);
	if ( ascii_in.rdstate() == std::ios::failbit ) {
	    std::cerr << "ERROR input file @srcdir@/testAscii.input is needed "
		      << "and does not exist.  Exit." << std::endl;
	    return;
	}
	// use IO_Ascii because we are checking against the original input file 
	HepMC::IO_Ascii ascii_out("testIOAscii.dat",std::ios::out);
	if ( ascii_out.rdstate() == std::ios::failbit ) {
	    std::cerr << "ERROR opening output file testAscii.dat.  Exit."
	              << std::endl;
	    return;
	}
	//........................................EVENT LOOP
	int icount=0;
	int ibad=0;
	bool ok = true;
	HepMC::GenEvent* evt = ascii_in.read_next_event();
	while ( ok ) {
	    if( evt ) {
		icount++;
		if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
					      << " its # " << evt->event_number() 
					      << std::endl;
		ascii_out << evt;

		// clean up and get next event
		delete evt;
		ascii_in >> evt;
	    } else if (ascii_in.error_type() == 107 ) {
	        ++ibad;
                std::cerr << "INPUT ERROR: " << ascii_in.error_message() << std::endl;
		// clean up and get next event
		delete evt;
		ascii_in >> evt;
	    } else if (ibad > 50 ) {
                std::cerr << "INPUT ERROR: " << ascii_in.error_message() << std::endl;
	        ok = false;
	    } else {
	        ok = false;
	    }
	}
	// print status of input stream
	if ( ascii_in.error_type() != 0 ) {
            std::cout << "processing of @srcdir@/testAscii.input ended with error " 
	              << ascii_in.error_type() << std::endl;
            std::cout << "  --- " << ascii_in.error_message() << std::endl;
	}
	//........................................PRINT RESULT
	std::cout << icount << " events processed. Finished." << std::endl;
}

void read_testExtendedAscii()
{
    // extended (complete) output
    HepMC::IO_GenEvent xin("@srcdir@/testHepMCExtended.input",std::ios::in);
    // declare another IO_GenEvent for output
    HepMC::IO_GenEvent xout("testIOHepMCExtended.dat",std::ios::out);
    IsGoodEvent is_good_event;
    //........................................EVENT LOOP
    int icount=0;
    int ibad=0;
    bool ok = true;
    int num_good_events=0;
    HepMC::GenEvent* evt = xin.read_next_event();
    //while ( evt ) {
    while ( ok ) {
	if( evt ) {
	    icount++;
	    if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
					  << " its # " << evt->event_number() 
					  << std::endl;
	    //xout << evt;
	    if ( is_good_event(evt) ) {
		xout << evt;
		++num_good_events;
	    }

	    // clean up and get next event
	    delete evt;
	    xin >> evt;
	} else if (xin.error_type() == 107 ) {
	    ++ibad;
            std::cerr << "INPUT ERROR: " << xin.error_message() << std::endl;
	    // clean up and get next event
	    delete evt;
	    xin >> evt;
	} else if (ibad > 50 ) {
            std::cerr << "INPUT ERROR: " << xin.error_message() << std::endl;
	    ok = false;
	} else {
	    ok = false;
	}
    }
    // print status of input stream
    if ( xin.error_type() != 0 ) {
        std::cout << "processing of @srcdir@/testHepMCExtended.input ended with error " 
	          << xin.error_type() << std::endl;
        std::cout << "  --- " << xin.error_message() << std::endl;
    }
    std::cout << icount << " events processed. Finished." << std::endl;
}

void read_various()
{
    // declare an input strategy 
    HepMC::IO_GenEvent ascii_in("@srcdir@/testHepMCVarious.input",std::ios::in);
    // declare another IO_GenEvent for writing out the good events
    HepMC::IO_GenEvent ascii_out("testHepMCVarious.out",std::ios::out);
    //........................................EVENT LOOP
    int icount=0;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	icount++;
	if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
				      << " its # " << evt->event_number() 
				      << std::endl;
	ascii_out << evt;
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    // print status of input stream
    if ( ascii_in.error_type() != 0 ) {
        std::cout << "processing of @srcdir@/testHepMCVarious.input ended with error " 
	          << ascii_in.error_type() << std::endl;
        std::cout << "  --- " << ascii_in.error_message() << std::endl;
    }
    //........................................PRINT RESULT
    std::cout << icount << " events processed. Finished." << std::endl;
}
