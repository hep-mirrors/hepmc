//-------------------------------------------------------------------
// testHepMC.cc.in
//
// garren@fnal.gov, March 2006
// based on example_EventSelection
// Apply an event selection to the events in testHepMC.input
// Events containing a photon of pT > 25 GeV pass the selection
// and are written to "testHepMC.out"
// Also write events using IO_AsciiParticles 
//-------------------------------------------------------------------
//

#include "HepMC/GenEvent.h"
#include "HepMC/GenCrossSection.h"
#ifndef HEPMC_IO_ASCII_REMOVED
#include "HepMC/IO_Ascii.h"
#endif
#ifdef HEPMC_HAS_IO_GENEVENT
#include "HepMC/IO_GenEvent.h"
#endif
#include "HepMC/IO_AsciiParticles.h"

// define methods and classes used by this test
#include "IsGoodEvent.h"
#include "testHepMCMethods.h"

void read_testIOGenEvent();
void read_variousFormats();
void writeWithCrossSection();
void readWithCrossSection();
void read_nan();

int main() { 
    read_testIOGenEvent();
    read_variousFormats();
    read_nan();
    writeWithCrossSection();
    readWithCrossSection();
    return 0;
}

void read_testIOGenEvent()
{
    std::cout << std::endl;
    std::cout << "basic IO_GenEvent input and output" << std::endl;
    // declare an input strategy to read the data produced with the 
    // example_MyPythia - units are GeV and mm
    HepMC::IO_GenEvent ascii_in("@srcdir@/testIOGenEvent.input",std::ios::in);
    ascii_in.use_input_units( HepMC::Units::GEV, HepMC::Units::MM );
    // declare another IO_GenEvent for writing out the good events
    HepMC::IO_GenEvent ascii_out("testHepMC.out",std::ios::out);
    // declare an output IO_GenEvent for testing precision
    HepMC::IO_GenEvent prec_out("testHepMCprecision.out",std::ios::out);
    prec_out.precision(10);
    // declare an IO_AsciiParticle for output
    HepMC::IO_AsciiParticles particle_out("testHepMCParticle.out",std::ios::out);
    // declare an instance of the event selection predicate
    IsGoodEvent is_good_event;
    //........................................EVENT LOOP
    int icount=0;
    int num_good_events=0;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	++icount;
	if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
				      << " its # " << evt->event_number() 
				      << std::endl;
	if ( is_good_event(evt) ) {
	    particleTypes(evt);
	    ascii_out << evt;
	    particle_out << evt;
	    prec_out << evt;
	    ++num_good_events;
	}
	
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    //........................................PRINT RESULT
    std::cout << num_good_events << " out of " << icount 
	      << " processed events passed the cuts. Finished." << std::endl;
}

void read_variousFormats()
{
    std::cout << std::endl;
    std::cout << "process varied input" << std::endl;
    // declare an input strategy 
    HepMC::IO_GenEvent ascii_in("@srcdir@/testHepMCVarious.input",std::ios::in);
    ascii_in.use_input_units( HepMC::Units::GEV, HepMC::Units::MM );
    // declare another IO_GenEvent for writing out the good events
    HepMC::IO_GenEvent ascii_out("testHepMCVarious.out",std::ios::out);
    //........................................EVENT LOOP
    int icount=0;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	icount++;
	double pim;
	std::cout << "Processing Event Number " << icount
		  << " its # " << evt->event_number() 
		  << std::endl;
	ascii_out << evt;
	// units should be unknown
	evt->write_units();
	pim = findPiZero(evt);
	std::cout << " pizero mass: " << pim << std::endl;
	// set units to GeV and mm
	evt->use_units(HepMC::Units::GEV, HepMC::Units::MM);
	evt->write_units();
	pim = findPiZero(evt);
	std::cout << " pizero mass: " << pim 
	          << " " << HepMC::Units::name( evt->momentum_unit() ) << std::endl;
	// convert units to MeV
	evt->use_units(HepMC::Units::MEV, HepMC::Units::MM);
	evt->write_units();
	pim = findPiZero(evt);
	std::cout << " pizero mass: " << pim 
	          << " " << HepMC::Units::name( evt->momentum_unit() ) << std::endl;
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    //........................................PRINT RESULT
    std::cout << icount << " events processed. Finished." << std::endl;
}

void writeWithCrossSection()
{
    // declare an input strategy to read input data 
    // units are GeV and mm
    HepMC::IO_GenEvent ascii_in("@srcdir@/testIOGenEvent.input",std::ios::in);
    ascii_in.use_input_units( HepMC::Units::GEV, HepMC::Units::MM );
    // declare another IO_GenEvent for writing out some events
    HepMC::IO_GenEvent ascii_out("testCrossSection.out",std::ios::out);
    // declare an output stream for printing events
    std::ofstream xout( "testCrossSection.cout" );
    // create an empty GenCrossSection object
    HepMC::GenCrossSection cross;
    //........................................EVENT LOOP
    int icount=0;
    const double xs0 = 0.00346;
    const double xs1 = 0.12;
    const double xs2 = 33.234;
    const double xs3 = 459.345;
    double xserr = 0.0001;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	icount++;
	// use a variety of arbitrary cross section values
	if( icount < 10 ) {
	    const double xs = xs0 - 1.34 * xserr;
	    cross.set_cross_section( xs, xserr );
	} else if( icount < 20 ) {
	    const double xs = xs1 - 1.34 * xserr;
	    cross.set_cross_section( xs, xserr );
	} else if( icount < 30 ) {
	    const double xs = xs2 - 1.34 * xserr;
	    cross.set_cross_section( xs, xserr );
	} else {
	    const double xs = xs3 - 1.34 * xserr;
	    cross.set_cross_section( xs, xserr );
	}
	xserr *= 0.99;
	if ( icount == 10 ) xserr += 0.01;
	if ( icount == 20 ) xserr += 0.4;
	if ( icount == 30 ) xserr += 1.0;
	// attach this cross section to the event
	evt->set_cross_section( cross );
	evt->write_cross_section();
	if ( icount%20==1 ) {
	    std::cout << "writeWithCrossSection: Processing Event Number " << icount
				      << " its # " << evt->event_number() 
				      << std::endl;
	    ascii_out << evt;
	    evt->print(xout);
	}
	
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    //........................................PRINT RESULT
    std::cout << "writeWithCrossSection processed " << icount << " events. Finished." << std::endl;
}

void readWithCrossSection()
{
    // read the file we just wrote
    HepMC::IO_GenEvent ascii_in("testCrossSection.out",std::ios::in);
    // declare another IO_GenEvent for writing out some events
    HepMC::IO_GenEvent ascii_out("testCrossSection2.out",std::ios::out);
    //........................................EVENT LOOP
    int icount=0;
    HepMC::GenEvent* evt = ascii_in.read_next_event();
    while ( evt ) {
	++icount;
	std::cout << "readWithCrossSection: Processing Event Number " << icount
				  << " its # " << evt->event_number() 
				  << std::endl;
	if (evt->cross_section()->cross_section() <= 0) {
          std::cout << "testReadCrossSection: invalid cross-section!" << std::endl;
	}
	ascii_out << evt;
	
	// clean up and get next event
	delete evt;
	ascii_in >> evt;
    }
    //........................................PRINT RESULT
    std::cout << "readWithCrossSection processed " << icount << " events. Finished." << std::endl;
}

void read_nan()
{
    // Read an input file that has corrupt information (nan's)
    //
    HepMC::IO_GenEvent xin("@srcdir@/testHepMCVarious.input",std::ios::in);
    HepMC::IO_GenEvent xout("testNaN.out",std::ios::out);
    //........................................EVENT LOOP
    int icount=0;
    int invaliddata=0;
    bool ok = true;
    std::cout << "---------------------------------------- " << std::endl;
    std::cout << "Begin NaN test " << std::endl;
    HepMC::GenEvent* evt = xin.read_next_event();
    //
    // To recover from corrupt input, replace "while(evt) {...}" 
    // with  "while(ok) { if(evt) {... xin >> evt;} else {...} }"
    //
    while ( ok ) {
	if( evt ) {
	    ++icount;
	    std::cout << "read_nan: Processing Event Number " << icount
		      << " its # " << evt->event_number() 
		      << std::endl;
	    xout << evt;
	    // clean up and get next event
	    delete evt;
	    xin >> evt;
	} else if (xin.error_type() == HepMC::IO_Exception::InvalidData ) {
	    ++invaliddata;
            std::cerr << "INPUT ERROR: " << xin.error_message() << std::endl;
	    // clean up and get next event
	    delete evt;
	    xin >> evt;
	} else if (invaliddata > 50 ) {
            std::cerr << "INPUT ERROR: " << xin.error_message() << std::endl;
	    ok = false;
	} else {
	    ok = false;
	}
    }
    // print status of input stream
    if ( xin.error_type() != 0 ) {
        std::cout << "processing of @srcdir@/testHepMCVarious.input ended with error " 
	          << xin.error_type() << std::endl;
        std::cout << "  --- " << xin.error_message() << std::endl;
    }
    std::cout << icount << " events processed and " 
              << invaliddata << " events ignored. Finished." 
              << std::endl;
    std::cout << "End NaN test " << std::endl;
    std::cout << "---------------------------------------- " << std::endl;
}

