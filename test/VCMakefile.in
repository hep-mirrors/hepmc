#custom makefile for Visual C++

@SET_MAKE@
AM_MAKEFLAGS = @AM_MAKEFLAGS@

# Applicable to each test program:
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
SET_MAKE = @SET_MAKE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
NORMAL_INSTALL = :
NORMAL_UNINSTALL = :

check_PROGRAMS = testSimpleVector$(EXEEXT) testUnits$(EXEEXT) \
	testPrintBug$(EXEEXT) testHepMC$(EXEEXT) \
	testHepMCIteration$(EXEEXT) testMass$(EXEEXT) \
	testMultipleCopies$(EXEEXT)
TESTS = testSimpleVector$(EXEEXT) testUnits$(EXEEXT) testHepMC.sh \
	testHepMCIteration.sh testMass.sh testPrintBug.sh \
	testMultipleCopies$(EXEEXT)
XFAIL_TESTS =
subdir = test
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/testHepMC.cc.in $(srcdir)/testHepMC.sh.in \
	$(srcdir)/testHepMCIteration.cc.in \
	$(srcdir)/testHepMCIteration.sh.in $(srcdir)/testMass.cc.in \
	$(srcdir)/testMass.sh.in $(srcdir)/testMultipleCopies.cc.in \
	$(srcdir)/testPrintBug.sh.in

ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES = testHepMC.cc testMass.cc testHepMCIteration.cc \
	testMultipleCopies.cc testHepMC.sh \
	testMass.sh testHepMCIteration.sh testPrintBug.sh
am_testHepMC_OBJECTS = testHepMC.$(OBJEXT)
testHepMC_OBJECTS = $(am_testHepMC_OBJECTS)
testHepMC_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
am_testHepMCIteration_OBJECTS = testHepMCIteration.$(OBJEXT)
testHepMCIteration_OBJECTS = $(am_testHepMCIteration_OBJECTS)
testHepMCIteration_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
am_testMass_OBJECTS = testMass.$(OBJEXT)
testMass_OBJECTS = $(am_testMass_OBJECTS)
testMass_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
am_testMultipleCopies_OBJECTS = testMultipleCopies.$(OBJEXT)
testMultipleCopies_OBJECTS = $(am_testMultipleCopies_OBJECTS)
testMultipleCopies_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
am_testPrintBug_OBJECTS = testPrintBug.$(OBJEXT)
testPrintBug_OBJECTS = $(am_testPrintBug_OBJECTS)
testPrintBug_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
am_testSimpleVector_OBJECTS = testSimpleVector.$(OBJEXT)
testSimpleVector_OBJECTS = $(am_testSimpleVector_OBJECTS)
testSimpleVector_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
am_testUnits_OBJECTS = testUnits.$(OBJEXT)
testUnits_OBJECTS = $(am_testUnits_OBJECTS)
testUnits_DEPENDENCIES = $(top_builddir)/src/HepMC.lib
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)/HepMC
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) /Fe$@
SOURCES = $(testHepMC_SOURCES) \
	$(testHepMCIteration_SOURCES) $(testMass_SOURCES) \
	$(testMultipleCopies_SOURCES) $(testPrintBug_SOURCES) \
	$(testSimpleVector_SOURCES) $(testUnits_SOURCES)
DIST_SOURCES = $(testHepMC_SOURCES) \
	$(testHepMCIteration_SOURCES) $(testMass_SOURCES) \
	$(testMultipleCopies_SOURCES) $(testPrintBug_SOURCES) \
	$(testSimpleVector_SOURCES) $(testUnits_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AM_CXXFLAGS = @AM_CXXFLAGS@
AR = @AR@
AS = @AS@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CLHEPdir = @CLHEPdir@
COPY_P = @COPY_P@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DIFF_Q = @DIFF_Q@
EXEEXT = @EXEEXT@
INSTALL = @INSTALL@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LN_S = @LN_S@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SHELL = @SHELL@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
am__include = @am__include@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
builddir = @builddir@
datadir = @datadir@
exec_prefix = @exec_prefix@
includedir = @includedir@
install_sh = @install_sh@
libdir = @libdir@
mkdir_p = @mkdir_p@
prefix = @prefix@
srcdir = @srcdir@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
INCLUDES = -I$(top_builddir) -I$(top_srcdir) 
LDADD = $(top_builddir)/src/HepMC.lib \
        $(top_builddir)/fio/HepMCfio.lib 

# how to specify output file
OUTFLAG = /Fo$@
check_SCRIPTS = testHepMC.sh testHepMCIteration.sh testPrintBug.sh \
                testMass.sh


# Identify the dependencies on a per-test basis:
testSimpleVector_SOURCES = testSimpleVector.cc
testUnits_SOURCES = testUnits.cc
testHepMC_SOURCES = testHepMC.cc
testMass_SOURCES = testMass.cc
testHepMCIteration_SOURCES = testHepMCIteration.cc
testMultipleCopies_SOURCES = testMultipleCopies.cc
testPrintBug_SOURCES = testPrintBug.cc

# Identify the link libraries and flags on a per-test basis:
testSimpleVector_LDADD = $(top_builddir)/src/HepMC.lib
testUnits_LDADD = $(top_builddir)/src/HepMC.lib
testHepMC_LDADD = $(top_builddir)/src/HepMC.lib
testMass_LDADD = $(top_builddir)/src/HepMC.lib
testHepMCIteration_LDADD = $(top_builddir)/src/HepMC.lib
testMultipleCopies_LDADD = $(top_builddir)/src/HepMC.lib
testPrintBug_LDADD = $(top_builddir)/src/HepMC.lib

#testHepMC_LDFLAGS          = -Wl,--rpath -Wl,$(top_builddir)/src/.libs \
#                             -Wl,--rpath -Wl,$(top_builddir)/fio/.libs
#testMass_LDFLAGS           = -Wl,$(top_builddir)/fio/.libs
#testHepMCIteration_LDFLAGS = -Wl,$(top_builddir)/fio/.libs
#testMultipleCopies_LDFLAGS = -Wl,$(top_builddir)/fio/.libs

# Identify input data file(s) and prototype output file(s):
EXTRA_DIST = testHepMC.input testHepMC.output testHepMCParticle.output \
             testPrintBug.output testHepMCExtended.dat \
	     testHepMCIteration.output testHepMCIterationExtended.output \
	     testAscii.input testAscii.dat


# Identify generated file(s) to be removed when 'make clean' is requested:
CLEANFILES = testHepMC.out testHepMCParticle.out testHepMCExtended.out \
             testPrintBug.out testHepMCIterationExtended.out testMass.out \
	     testAscii.dat testHepMCExtended.dat testHepMCIteration.out \
             testHepMCIteration.dat testMass1.dat testMass2.dat \
             testHepMC.cout testHepMCIteration.cout \
	     testMultipleCopies.out testHepMCVarious.out testIOAscii.dat \
	     testMultipleCopies1.dat testMultipleCopies2.dat \
	     testMultipleOriginals.dat testIOHepMCExtended.dat \
	     testUnits.out

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
.PRECIOUS: VCMakefile
VCMakefile: $(srcdir)/VCMakefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
testHepMC.cc: $(top_builddir)/config.status $(srcdir)/testHepMC.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testMass.cc: $(top_builddir)/config.status $(srcdir)/testMass.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testHepMCIteration.cc: $(top_builddir)/config.status $(srcdir)/testHepMCIteration.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testMultipleCopies.cc: $(top_builddir)/config.status $(srcdir)/testMultipleCopies.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testHepMC.sh: $(top_builddir)/config.status $(srcdir)/testHepMC.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testMass.sh: $(top_builddir)/config.status $(srcdir)/testMass.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testHepMCIteration.sh: $(top_builddir)/config.status $(srcdir)/testHepMCIteration.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testPrintBug.sh: $(top_builddir)/config.status $(srcdir)/testPrintBug.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
testHepMC$(EXEEXT): $(testHepMC_OBJECTS) $(testHepMC_DEPENDENCIES) 
	@rm -f testHepMC$(EXEEXT)
	$(CXXLINK) $(testHepMC_OBJECTS) $(testHepMC_LDADD) $(LIBS)
testHepMCIteration$(EXEEXT): $(testHepMCIteration_OBJECTS) $(testHepMCIteration_DEPENDENCIES) 
	@rm -f testHepMCIteration$(EXEEXT)
	$(CXXLINK) $(testHepMCIteration_OBJECTS) $(testHepMCIteration_LDADD) $(LIBS)
testMass$(EXEEXT): $(testMass_OBJECTS) $(testMass_DEPENDENCIES) 
	@rm -f testMass$(EXEEXT)
	$(CXXLINK) $(testMass_OBJECTS) $(testMass_LDADD) $(LIBS)
testMultipleCopies$(EXEEXT): $(testMultipleCopies_OBJECTS) $(testMultipleCopies_DEPENDENCIES) 
	@rm -f testMultipleCopies$(EXEEXT)
	$(CXXLINK) $(testMultipleCopies_OBJECTS) $(testMultipleCopies_LDADD) $(LIBS)
testPrintBug$(EXEEXT): $(testPrintBug_OBJECTS) $(testPrintBug_DEPENDENCIES) 
	@rm -f testPrintBug$(EXEEXT)
	$(CXXLINK) $(testPrintBug_OBJECTS) $(testPrintBug_LDADD) $(LIBS)
testSimpleVector$(EXEEXT): $(testSimpleVector_OBJECTS) $(testSimpleVector_DEPENDENCIES) 
	@rm -f testSimpleVector$(EXEEXT)
	$(CXXLINK) $(testSimpleVector_OBJECTS) $(testSimpleVector_LDADD) $(LIBS)
testUnits$(EXEEXT): $(testUnits_OBJECTS) $(testUnits_DEPENDENCIES) 
	@rm -f testUnits$(EXEEXT)
	$(CXXLINK) $(testUnits_OBJECTS) $(testUnits_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testHepMC.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testHepMCIteration.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testMass.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testMultipleCopies.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testPrintBug.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testSimpleVector.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testUnits.Po@am__quote@

.cc.obj:
	source='$<' object='$@' libtool=no \
	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
	$(CXXCOMPILE) /c /Fo$@ `$(CYGPATH_W) '$<'`

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; ws='[	 ]'; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *$$ws$$tst$$ws*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *$$ws$$tst$$ws*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS) $(check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: VCMakefile
install: install-am
uninstall: uninstall-am

install-am: all-am

mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am:

.MAKE: install-am 

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic   \
	distclean distclean-compile distclean-generic \
	distdir install install-am   \
	mostlyclean mostlyclean-compile \
	mostlyclean-generic uninstall uninstall-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
