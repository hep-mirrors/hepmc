//////////////////////////////////////////////////////////////////////////
// testDeprecated.cc.in
//
// garren@fnal.gov, March 2006
// This program checks the deprecated IO_Ascii and IO_ExtendedAscii
// Apply an event selection to the events in testAscii.input
// Events containing a photon of pT > 25 GeV pass the selection and are
// written to "testAscii.dat"
// Also read and write events using IO_ExtendedAscii
//////////////////////////////////////////////////////////////////////////
//

#include "HepMC/IO_Ascii.h"
#include "HepMC/IO_ExtendedAscii.h"
#include "HepMC/GenEvent.h"

// define methods and classes used by this test
#include "IsGoodEvent.h"

int main() { 
    // declare an instance of the event selection predicate
    IsGoodEvent is_good_event;
    {
        // declare an input strategy to read the data produced with the 
	// example_MyPythia
	HepMC::IO_Ascii ascii_in("@srcdir@/testAscii.input",std::ios::in);
	if ( ascii_in.rdstate() == std::ios::failbit ) {
	    std::cerr << "ERROR input file @srcdir@/testAscii.input is needed "
		      << "and does not exist.  Exit." << std::endl;
	    return 1;
	}
	// declare another IO_Ascii for writing out the good events
	HepMC::IO_Ascii ascii_out("testAscii.dat",std::ios::out);
	if ( ascii_out.rdstate() == std::ios::failbit ) {
	    std::cerr << "ERROR opening output file testAscii.dat.  Exit."
	              << std::endl;
	    return 1;
	}
	//........................................EVENT LOOP
	int icount=0;
	int num_good_events=0;
	HepMC::GenEvent* evt = ascii_in.read_next_event();
	while ( evt ) {
	    icount++;
	    if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
					  << " its # " << evt->event_number() 
					  << std::endl;
	    if ( is_good_event(evt) ) {
		ascii_out << evt;
		++num_good_events;
	    }

	    // clean up and get next event
	    delete evt;
	    ascii_in >> evt;
	}
	//........................................PRINT RESULT
	std::cout << num_good_events << " out of " << icount 
		  << " processed events passed the cuts. Finished." << std::endl;
    }
    // repeat using IO_ExtendedAscii
    {
	// extended (complete) output
	HepMC::IO_ExtendedAscii xin("@srcdir@/testHepMCExtended.input",std::ios::in);
	// declare another IO_GenEvent for output
	HepMC::IO_ExtendedAscii xout("testHepMCExtended.dat",std::ios::out);
	//........................................EVENT LOOP
	int icount=0;
	int num_good_events=0;
        double x=0., y=0., z=0.;
	HepMC::GenEvent* evt = xin.read_next_event();
	while ( evt ) {
	    icount++;
	    if ( icount%50==1 ) std::cout << "Processing Event Number " << icount
					  << " its # " << evt->event_number() 
					  << std::endl;
	    if ( is_good_event(evt) ) {
		if (num_good_events == 0 ) {
		    // add some arbitrary PDF information
		    x = 0.1 * icount;
		    y = 0.13 * icount;
		    z = 0.012 * icount;
		    HepMC::PdfInfo pdf( 11, 12, x, y, z, 0.11, 0.34);
		    evt->set_pdf_info(pdf);
		}
		xout << evt;
		++num_good_events;
	    }

	    // clean up and get next event
	    delete evt;
	    xin >> evt;
	}
    }
	      
}
