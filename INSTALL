#-------------------------------------------------------------
# installing HepMC
#-------------------------------------------------------------

Although it may be possible to build the HepMC libraries from this directory,
we recommend that you create a separate build directory and work from there.

The directions below explain how to build with autoconf, etc.
As of HepMC 2.06.06, you also have the option to build with cmake.
We highly recommend that you build with cmake, as explained in 
cmake/INSTALL.   Using cmake is preferred for MacOSX and Windows.

#-------------------------------------------------------------
#  platform specific issues
#-------------------------------------------------------------

To build for Windows Visual C++, configure with CXX=cl CC=cl.
To avoid autotool confusion, we recommend running the bootstrap 
in your cygwin environment before beginning the build.
Notice that custom makefiles are used by the Visual C++ build.
See ReadMe.cygwin for more information.

On MacOSX, you need to define MACOSX_DEPLOYMENT_TARGET appropriately.  
For instance, set MACOSX_DEPLOYMENT_TARGET to "10.4" if you 
have MacOS 10.4 installed on your system. 

#-------------------------------------------------------------
#  installing from a source code tar ball
#-------------------------------------------------------------

Unwind the source code tar ball in some relevant directory.
Autoconf and automake will aready have been run.  
Determine where the files will be installed.
We recommend that you create a separate build directory that is NOT in 
the source code directory tree.

cd <build_directory>
<source_code_direcotry>/configure --prefix=<install_dir>
   (Note that files will be installed under /usr/local if you do not 
    specify a prefix.)
make
   (Build temporary copies of libraries and executables.)
make check
   (Run the tests.)
make install
   (Copy libraries, headers, executables, etc. to relevant 
    subdirectories under <install_dir>.)

#-------------------------------------------------------------
#  configure options
#-------------------------------------------------------------

A variety of options can be given to configure.  Below is a list 
of the options that you are likely to find most useful.

  --help                  provides a partial list of options
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [default is /usr/local]
  --disable-shared        build only static libraries
  --disable-static        build only shared libraries   
  --enable-visual         on by default when using Visual C++
  --enable-gmake          use gmake (default is make)
  --with-CLHEP            --with-CLHEP=$CLHEP_DIR: 
                          CLHEP is used ONLY in the examples
  --with-GENSER           --with-GENSER=$GENSER_DIR: 
                          GENSER is used ONLY in the examples
 
#-------------------------------------------------------------
# building from cvs
#-------------------------------------------------------------

You will need current versions of automake, autoconf, and libtool.
On some machines, you will need to build them.  See building autotools below.

cvs co HepMC

cd HepMC
./bootstrap

Bootstrap will run doxygen and latex to build the documents.  

Now continue with directions as if you unpacked a source code tarball.

#-------------------------------------------------------------
# building autotools
#-------------------------------------------------------------

If you do not have at least autoconf 2.59 and automake 1.9.1, you will 
need to build autoconf, automake, and libtool.  On some platforms, 
you may also need to build m4 and texinfo.

Download the relevant tarballs from gnu.org 
(http://www.gnu.org/software/autoconf/, http://www.gnu.org/software/automake/,
and http://www.gnu.org/software/libtool/)
Untar them in a common source code tree.
Decide whether you want to install them in /usr/local or your own
install directory.  If you use your own install directory, use

        --prefix=<install_dir> 

with configure.

For each autotool package:

     <source_code_dir>/configure [--prefix=<install_dir>]
     make
     make install

Make sure that <install_dir>/bin is before /usr/bin in your path.

#-------------------------------------------------------------
